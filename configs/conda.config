
workDir = params.workdir
    process.executor = 'local'

        process {
            withLabel: basics { cpus = params.cores ; conda = 'envs/basics.yaml' } 
            withLabel: fastp { cpus = params.cores ; conda = 'envs/fastp.yaml' } 
            withLabel: fastqc { cpus = params.cores ; conda = 'envs/fastqc.yaml' } 
            withLabel: multiqc { cpus = params.cores ; conda = 'envs/multiqc.yaml' } 
            withLabel: spades { cpus = params.cores ; conda = 'envs/spades.yaml' } 
            withLabel: kaiju { cpus = params.cores ; conda = 'envs/kaiju.yaml' }
            withLabel: krona { cpus = params.cores ; conda = 'envs/krona.yaml'  }
            withLabel: filter { cpus = 1; conda = 'mhoelzer/cwl_length_filter_docker.yaml' }
	        withLabel: virsorter { cpus = params.cores ; conda = 'virsorter.yaml' }
            withLabel: virfinder { cpus = 1 ; conda = 'virfinder.yaml' }
            withLabel: parse { cpus = 1; conda = 'mhoelzer/cwl_parse_pred.yaml' }
            withLabel: prodigal { cpus = params.cores; conda = 'mhoelzer/prodigal.yaml' }
            withLabel: hmmscan { cpus = params.cores; conda = 'mhoelzer/hmmscan.yaml' }
            //withLabel: hmm_postprocessing { cpus = 1; conda = 'mhoelzer/sed_docker.yaml' }
            withLabel: ratio_evalue { cpus = 1; conda = 'mhoelzer/ratio_evalue.yaml' }
            withLabel: annotation { cpus = 1; conda = 'mhoelzer/annotation_viral_contigs.yaml' }
            withLabel: mapping { cpus = 1; conda = 'mhoelzer/mapping_viral_predictions.yaml' }
            withLabel: assign { cpus = 1; conda = 'mhoelzer/assign_taxonomy.yaml' }
        }

